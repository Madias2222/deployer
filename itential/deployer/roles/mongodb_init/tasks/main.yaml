# Copyright (c) 2022, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Check the auth status
  ansible.builtin.include_role:
    name: mongodb_common
    tasks_from: check-auth-status.yml

- name: Determine the primary server
  ansible.builtin.include_role:
    name: mongodb_common
    tasks_from: determine-primary-server.yml

# Start clean
- name: Proactively drop the itential database
  community.mongodb.mongodb_shell:
    mongo_cmd: auto
    login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
    login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
    db: itential
    eval: db.dropDatabase()
  when:
    - inventory_hostname == primary_server
    - drop_database is defined
    - drop_database | bool

- name: Add users to database
  when: inventory_hostname == primary_server
  block:
    # The tasks in this file should only run on one host if configuring a replica set
    # This creates the admin user that has root access to the database
    - name: Add admin user to database
      community.mongodb.mongodb_user:
        login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
        login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
        database: "{{ mongo_admin_db_name }}"
        name: admin
        password: "{{ mongo_user_admin_password }}"
        state: present
        roles:
          - db: "{{ mongo_admin_db_name }}"
            role: root
        update_password: on_create
        replica_set: "{{ mongodb_replication_enabled | ternary(mongo_replset_name, omit) }}"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    # This creates the itential user that only has read & write access to the
    # itential database.  It is used by IAP to connect to the db.
    - name: Add itential user to database
      community.mongodb.mongodb_user:
        login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
        login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
        database: "{{ mongo_itential_db_name }}"
        user: itential
        password: "{{ mongo_user_itential_password }}"
        state: present
        roles:
          - db: "{{ mongo_itential_db_name }}"
            role: readWrite
        update_password: on_create
        replica_set: "{{ mongodb_replication_enabled | ternary(mongo_replset_name, omit) }}"
      vars:
        ansible_python_interpreter: /usr/bin/python3

    # This creates the localaaa user that only has read & write access to the
    # LocalAAA database.  It is used by the local AAA adapter to login to IAP.
    - name: Add localaaa user to database
      community.mongodb.mongodb_user:
        login_user: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary('admin', omit) }}"
        login_password: "{{ mongodb_auth_enabled is defined and mongodb_auth_enabled | ternary(mongo_user_admin_password, omit) }}"
        database: "{{ mongo_localaaa_db_name }}"
        user: localaaa
        password: "{{ mongo_user_localaaa_password }}"
        state: present
        roles:
          - db: "{{ mongo_localaaa_db_name }}"
            role: readWrite
        update_password: on_create
        replica_set: "{{ mongodb_replication_enabled | ternary(mongo_replset_name, omit) }}"
      vars:
        ansible_python_interpreter: /usr/bin/python3

- name: Create default profile documents for standard non-production environments
  when:
    - inventory_hostname == primary_server
    - groups["redis_secondary"] | default([]) | length == 0
    - groups["rabbitmq_secondary"] | default([]) | length == 0
  block:
    # Create a default profile document in the itential database. This template
    # contains the logic to modify various properties based on the vars set in
    # install.yaml. For example, it will correctly configure a Redis HA cluster
    # using Redis Sentinel and also other settings.
    - name: Create Local AAA profile document
      ansible.builtin.template:
        src: profile.j2
        dest: /tmp/itential_localaaa_profile.json
        mode: '1777'
      vars:
        desc: A default IAP profile that is using the Local AAA adapter to login
        id: Local_AAA
        service: local_aaa
        redis_group_name: redis
        rabbit_group_name: rabbitmq

    # Create a second profile document that is configured to use the LDAP adapter.
    # This still requires the admins to correctly configure the LDAP adapter to
    # communicate with the AAA server. It is a convenience feature to save some time
    # for our users. This is not the active profile.
    - name: Create the LDAP profile (non-active profile)
      ansible.builtin.template:
        src: profile.j2
        dest: /tmp/itential_ldap_profile.json
        mode: '1777'
      vars:
        desc: An IAP profile that is using the LDAP adapter to login
        id: LDAP
        service: LDAP
        redis_group_name: redis
        rabbit_group_name: rabbitmq

    - name: Insert profile docs into MongoDB (no auth)
      ansible.builtin.command:
        argv:
          - mongoimport
          - --uri="{{ mongo_itential_connection_string }}"
          - --collection=iap_profiles
          - --mode=upsert
          - --upsertFields=id
          - --file="{{ item }}"
      loop:
        - /tmp/itential_localaaa_profile.json
        - /tmp/itential_ldap_profile.json
      changed_when: true
      when: mongodb_auth_enabled is not defined or not mongodb_auth_enabled

    - name: Insert profile docs into MongoDB (auth enabled)
      ansible.builtin.command:
        argv:
          - mongoimport
          - --username=admin
          - --password="{{ mongo_user_admin_password }}"
          - --authenticationDatabase=admin
          - --uri="{{ mongo_itential_connection_string }}"
          - --collection=iap_profiles
          - --mode=upsert
          - --upsertFields=id
          - --file="{{ item }}"
      loop:
        - /tmp/itential_localaaa_profile.json
        - /tmp/itential_ldap_profile.json
      changed_when: true
      when:
        - mongodb_auth_enabled is defined
        - mongodb_auth_enabled

- name: Create advanced profile documents for non-default production environments
  when:
    - inventory_hostname == primary_server
    - groups["redis_secondary"] | default([]) | length > 0
    - groups["rabbitmq_secondary"] | default([]) | length > 0
  block:
    - name: Create Primary Local AAA profile document
      ansible.builtin.template:
        src: profile.j2
        dest: /tmp/itential_primary_localaaa_profile.json
        mode: '1777'
      vars:
        desc: A default IAP profile that is using the Local AAA adapter to login for the primary data center
        id: Primary_Local_AAA
        service: local_aaa
        redis_group_name: redis
        rabbit_group_name: rabbitmq

    - name: Create Secondary Local AAA profile document
      ansible.builtin.template:
        src: profile.j2
        dest: /tmp/itential_secondary_localaaa_profile.json
        mode: '1777'
      vars:
        desc: A default IAP profile that is using the Local AAA adapter to login for the primary data center
        id: Secondary_Local_AAA
        service: local_aaa
        redis_group_name: redis_secondary
        rabbit_group_name: rabbitmq_secondary

    - name: Insert profile docs into MongoDB (no auth)
      ansible.builtin.command:
        argv:
          - mongoimport
          - --uri="{{ mongo_itential_connection_string }}"
          - --collection=iap_profiles
          - --mode=upsert
          - --upsertFields=id
          - --file="{{ item }}"
      loop:
        - /tmp/itential_primary_localaaa_profile.json
        - /tmp/itential_secondary_localaaa_profile.json
      changed_when: true
      when: mongodb_auth_enabled is not defined or not mongodb_auth_enabled

    - name: Insert profile docs into MongoDB (auth enabled)
      ansible.builtin.command:
        argv:
          - mongoimport
          - --username=admin
          - --password="{{ mongo_user_admin_password }}"
          - --authenticationDatabase=admin
          - --uri="{{ mongo_itential_connection_string }}"
          - --collection=iap_profiles
          - --mode=upsert
          - --upsertFields=id
          - --file="{{ item }}"
      loop:
        - /tmp/itential_primary_localaaa_profile.json
        - /tmp/itential_secondary_localaaa_profile.json
      changed_when: true
      when:
        - mongodb_auth_enabled is defined
        - mongodb_auth_enabled

# For each unique service config use a template to generate a JSON file with a
# prefix of "itential_sc". In a later task, all of the generated files matching
# the itential_sc* pattern will be imported into MongoDB using a mongoimport
# command. Delete all of these files at the end.
- name: Create service configs
  when: inventory_hostname == primary_server
  block:
    - name: Create the default local_aaa adapter config
      ansible.builtin.template:
        src: local_aaa_service_config.j2
        dest: /tmp/itential_sc_local_aaa.json
        mode: '1777'

    - name: Create the default email adapter config
      ansible.builtin.template:
        src: email_adapter_service_config.j2
        dest: /tmp/itential_sc_email_adapter.json
        mode: '1777'

    - name: Create the default LDAP adapter config
      ansible.builtin.template:
        src: ldap_adapter_service_config.j2
        dest: /tmp/itential_sc_ldap_adapter.json
        mode: '1777'

    # Import all of the service configs that were generated
    - name: Insert service configs into MongoDB (no auth)
      ansible.builtin.command:
        argv:
          - mongoimport
          - --uri="{{ mongo_itential_connection_string }}"
          - --collection=service_configs
          - --mode=upsert
          - --upsertFields=name
          - --file="{{ item }}"
      loop:
        - /tmp/itential_sc_local_aaa.json
        - /tmp/itential_sc_email_adapter.json
        - /tmp/itential_sc_ldap_adapter.json
      when:
        - mongodb_auth_enabled is not defined or not mongodb_auth_enabled

    - name: Insert service configs into MongoDB (auth enabled)
      ansible.builtin.command:
        argv:
          - mongoimport
          - --username=admin
          - --password="{{ mongo_user_admin_password }}"
          - --authenticationDatabase=admin
          - --uri="{{ mongo_itential_connection_string }}"
          - --collection=service_configs
          - --mode=upsert
          - --upsertFields=name
          - --file="{{ item }}"
      loop:
        - /tmp/itential_sc_local_aaa.json
        - /tmp/itential_sc_email_adapter.json
        - /tmp/itential_sc_ldap_adapter.json
      when:
        - mongodb_auth_enabled is defined
        - mongodb_auth_enabled

    - name: Clean up rendered template files in /tmp
      ansible.builtin.file:
        path: "/tmp/itential_*.json"
        state: absent
