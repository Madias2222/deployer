# Copyright (c) 2022, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Include release vars
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - "release-{{ iap_release }}.yaml"
    - "release-undefined.yaml"

- name: Check for valid MongoDB release
  fail:
    msg: "missing or invalid mongodb_release_url"
  when: mongodb_release_url == "UNDEFINED"

- name: Include base OS updates
  ansible.builtin.include_role:
    name: os

- name: Get the list of installed packages
  ansible.builtin.package_facts:
    manager: "auto"

# Install the mongodb repo if mongodb is not already installed
- name: Install mongodb repo
  ansible.builtin.yum_repository:
    name: "mongodb"
    description: MongoDB Repository
    baseurl: "{{ mongodb_release_url[ansible_distribution_major_version] }}"
    enabled: yes
    gpgcheck: yes
    gpgkey: "{{ mongodb_gpgkey_url[ansible_distribution_major_version] }}"
  when: "'mongodb-org' not in ansible_facts.packages"

# Install mongodb if mongodb is not already installed
- name: Install the MongoDB packages
  ansible.builtin.yum:
    name: "{{ mongodb_packages[ansible_distribution_major_version] }}"
    state: present
  when: "'mongodb-org' not in ansible_facts.packages"

- name: Install python
  ansible.builtin.include_tasks:
    file: install-python.yml

# Update yum config to prevent mongodb from getting updated by yum updates
- name: Prevent yum from updating mongo
  ansible.builtin.lineinfile:
    path: /etc/yum.conf
    line: exclude=mongodb-org* 

# Disable Transparent Huge Pages (THP)
- name: Create the systemd unit file
  ansible.builtin.template:
    src: thp.service.j2
    dest: "/etc/systemd/system/disable-transparent-huge-pages.service"

- name: Reload systemd unit files
  ansible.builtin.systemd:
    daemon_reload: true

- name: Start the THP service
  ansible.builtin.systemd:
    name: disable-transparent-huge-pages.service
    state: started

- name: Configure the system to run THP service on boot
  ansible.builtin.systemd:
    name: disable-transparent-huge-pages.service
    enabled: true

- name: Create custom tuned profile directory
  ansible.builtin.file:
    state: directory
    path: "/etc/tuned/virtual-guest-no-thp"
    owner: root
    group: root

- name: Ensure tuned does not re-enable THP
  ansible.builtin.template:
    src: tuned.conf.j2
    dest: "/etc/tuned/virtual-guest-no-thp/tuned.conf"

- name: Enable tuned profile
  ansible.builtin.command: tuned-adm profile virtual-guest-no-thp
  ignore_errors: true

  # Tune Kernel parameters
- name: Adjust keepalive
  ansible.posix.sysctl:
    name: net.ipv4.tcp_keepalive_time
    value: 300
  ignore_errors: true

- name: Disable zone reclaim mode
  ansible.posix.sysctl:
    name: vm.zone_reclaim_mode
    value: 0
  ignore_errors: true

- name: Increase throughput settings
  ansible.posix.sysctl:
    name: net.core.somaxconn
    value: 65535
  ignore_errors: true

# Set Soft User Limits
- name: Set number of procs
  community.general.pam_limits:
    domain: mongod
    limit_type: soft
    limit_item: nproc
    value: 32000
  ignore_errors: true

- name: Set number of files
  community.general.pam_limits:
    domain: mongod
    limit_type: soft
    limit_item: nofile
    value: 64000
  ignore_errors: true

- name: Create data directory
  ansible.builtin.file:
    state: directory
    path: "{{ mongo_data_dir }}"
    owner: "{{ mongo_owner }}"
    group: "{{ mongo_group }}"

# A mongo arbiter gets a different data directory, even though it does
# not store any data. This task should only run when and if there is a
# mongo arbiter host.
- name: Create arbiter data directory
  ansible.builtin.file:
    state: directory
    path: "{{ mongo_arbiter_data_dir }}"
    owner: "{{ mongo_owner }}"
    group: "{{ mongo_group }}"
  when:
    - groups.mongodb_arbiter is defined 
    - inventory_hostname in groups.mongodb_arbiter

- name: Configure mongo
  ansible.builtin.template:
    src: mongod.conf.j2
    dest: "{{ mongo_conf_file }}"
    owner: "{{ mongo_owner}}"
    group: "{{ mongo_group }}"
    mode: "0644"

- name: Adjust the data directory if this host is an arbiter
  ansible.builtin.lineinfile:
    path: "{{ mongo_conf_file }}"
    regexp: "^  dbPath: {{ mongo_data_dir }}"
    line: "  dbPath: {{ mongo_arbiter_data_dir }}"
  when: 
    - groups.mongodb_arbiter is defined 
    - inventory_hostname in groups.mongodb_arbiter

# Configure SELinux
- name: Create temporary working directory
  ansible.builtin.tempfile:
    state: directory
  register: workingdir

# Adjust SELinux to permit access to the cgroup. According to the MongoDB 
# documentation, the current SELinux policy does not allow the MongoDB 
# process to access /sys/fs/cgroup, which is required to determine the 
# available memory on your system.
- name: SELinux - Create a custom policy file to permit access to cgroup
  ansible.builtin.copy:
    src: "{{ role_path }}/files/mongodb_cgroup_memory.te"
    dest: "{{ workingdir.path }}/mongodb_cgroup_memory.te"
    
- name: SELinux - Compile and load the custom cgroup policy
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    - checkmodule -M -m -o "{{ workingdir.path }}/mongodb_cgroup_memory.mod" "{{ workingdir.path }}/mongodb_cgroup_memory.te"
    - semodule_package -o "{{ workingdir.path }}/mongodb_cgroup_memory.pp" -m "{{ workingdir.path }}/mongodb_cgroup_memory.mod"
    - semodule -i "{{ workingdir.path }}/mongodb_cgroup_memory.pp"
  ignore_errors: true

# Adjust SELinux to permit access to netstat for FTDC. /proc/net/netstat 
# is required for Full Time Diagnostic Data Capture (FTDC). FTDC in short
# is a mechanism  to facilitate analysis of the MongoDB server. The data 
# files in FTDC are compressed, not human-readable, and inherit the same
# file access  permission as the MongoDB data files. Due to this, only 
# users with access to the FTDC data files can transmit the data.
- name: SELinux - Create a custom policy file to permit access to netstat for FTDC
  ansible.builtin.copy:
    src: "{{ role_path }}/files/mongodb_proc_net.te"
    dest: "{{ workingdir.path }}/mongodb_proc_net.te"

- name: SELinux - Compile and load the custom netstat for FTDC policy
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    - checkmodule -M -m -o "{{ workingdir.path }}/mongodb_proc_net.mod" "{{ workingdir.path }}/mongodb_proc_net.te"
    - semodule_package -o "{{ workingdir.path }}/mongodb_proc_net.pp" -m "{{ workingdir.path }}/mongodb_proc_net.mod"
    - semodule -i "{{ workingdir.path }}/mongodb_proc_net.pp"
  ignore_errors: true

# MongoDB is configured to use non-default paths for its data and log
# directories. First, we need to update the SELinux policy to allow the 
# mongod service to use the new directory, itâ€™s worth to note that we 
# need to make sure to include the .* at the end of the directory. Then, 
# update the SELinux user policy for the new directory. Finally, apply 
# the updated SELinux policies to the directory. Do this for data and logs. 
- name: SELinux - Update the policy to allow the mongod service to use the custom data directory
  ansible.builtin.command: "{{ item }}"
  with_items:
    - semanage fcontext -a -t mongod_var_lib_t '{{ mongo_data_dir }}.*'
    - chcon -Rv -u system_u -t mongod_var_lib_t '{{ mongo_data_dir }}'
    - restorecon -R -v '{{ mongo_data_dir }}'
  register: result
  failed_when:
    - result.rc is defined
    - result.rc > 0
    - "'already defined' not in result.stderr"

- name: SELinux - Update the policy to allow the mongod service to use the custom log directory
  ansible.builtin.command: "{{ item }}"
  with_items:
    - semanage fcontext -a -t mongod_log_t '{{ mongo_log_dir }}'
    - chcon -Rv -u system_u -t mongod_log_t '{{ mongo_log_dir }}'
    - restorecon -R -v '{{ mongo_log_dir }}'
  failed_when:
    - result.rc is defined
    - result.rc > 0
    - "'already defined' not in result.stderr"

- name: SELinux - Update the policy to allow the mongod service to use the arbiter custom data directory
  ansible.builtin.command: "{{ item }}"
  with_items:
    - semanage fcontext -a -t mongod_var_lib_t '{{ mongo_arbiter_data_dir }}.*'
    - chcon -Rv -u system_u -t mongod_var_lib_t '{{ mongo_arbiter_data_dir }}'
    - restorecon -R -v '{{ mongo_data_dir }}'
  failed_when:
    - result.rc is defined
    - result.rc > 0
    - "'already defined' not in result.stderr"
  when: 
    - groups.mongodb_arbiter is defined 
    - inventory_hostname in groups.mongodb_arbiter

# Check if firewalld is running, if it is then open the appropriate ports
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Open Port on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ mongo_port }}/tcp"
    permanent: yes
    state: enabled
    zone: public
    immediate: yes
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - (ansible_facts.services["firewalld.service"].state == "running")
    - (ansible_facts.services["firewalld.service"].status == "enabled")
  ignore_errors: true

- name: Start mongo
  ansible.builtin.systemd:
    name: mongod
    state: restarted
    enabled: true

- name: Remove temporary working directory
  ansible.builtin.file:
    path: "{{ workingdir.path }}"
    state: absent

- name: Determine mongo version
  ansible.builtin.shell:
    cmd: mongod --version | grep "db version" | cut -d" " -f3
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0 and result.rc != 127

- name: Set mongo version variable
  ansible.builtin.set_fact:
    mongodb_release: "{{ result.stdout }}"

  when: result.stdout | int < 5
- name: Write mongodb release information
  ansible.builtin.lineinfile:
    path: "/etc/iap-release"
    regexp: '^MONGODB='
    line: "MONGODB={{ mongodb_release }}"
    create: true
