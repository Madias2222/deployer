---
# Saving unseal keys to a directory (may remove this later for security)
- name: Create directory to store unseal keys
  ansible.builtin.file:
    path: "{{ unseal_keys_dir }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750

- name: Create directory to store root key
  ansible.builtin.file:
    path: "{{ root_key_dir }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750

# Show status of vault server
- name: Get status of vault server
  ansible.builtin.command: vault status -format json
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  register: vault_status
  ignore_errors: true

- name: Parse output of vault status
  ansible.builtin.set_fact: 
    vault_status_parsed: "{{ vault_status.stdout | from_json }}"

- name: Initialize vault server
  ansible.builtin.shell: vault operator init -format json
  environment:  
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  register: vault_init_results
  when: vault_status_parsed.initialized == false

- name: Parse output of vault init
  ansible.builtin.set_fact:
    vault_init_parsed: "{{ vault_init_results.stdout | from_json}}"
  when: vault_status_parsed.initialized == false

- name: Write unseal keys to files
  ansible.builtin.copy:
    dest: "{{ unseal_keys_dir }}/unseal_key_{{ item.0 }}"
    content: "{{ item.1 }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0660
  with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
  when: vault_status_parsed.initialized == false
  no_log: true

- name: Write root token to file
  ansible.builtin.copy:
    content: "{{ vault_init_parsed.root_token }}"
    dest: "{{ root_key_dir }}/token.txt"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0660
  when: vault_status_parsed.initialized == false

- name: Fetch root token
  ansible.builtin.fetch: 
    src: "{{ root_key_dir }}/token.txt"
    dest: ./token.txt
    flat: yes
  when: 
    - configure_vault | bool
    - inventory_hostname in groups["vault"]

- name: Getting path to unseal keys
  find:
    paths: "{{ unseal_keys_dir }}"
  register: unseal_key_files
  when: vault_status_parsed.sealed == true

- name: Reading unseal key contents
  command: cat {{ item.path }}
  with_items: "{{ unseal_key_files.files }}"
  register: unseal_keys
  when: vault_status_parsed.sealed == true
  no_log: true

- name: Unseal vault with unseal keys
  shell: vault operator unseal {{ item.stdout }}
  environment: 
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  with_items: "{{ unseal_keys.results }}"
  when: vault_status_parsed.sealed == true
  no_log: true

- name: Get root key
  ansible.builtin.slurp:
    src: '{{ root_key_dir }}/token.txt'
  register: rootKey

# Check if kv-v2 engine exists
- name: Check for kv-v2 secrets engine
  shell: vault secrets list
  environment: 
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
    VAULT_TOKEN: "{{ rootKey.content | b64decode }}"
  register: secrets

- name: Enable KV Secrets Engine
  shell: vault secrets enable kv-v2
  environment:  
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
    VAULT_TOKEN: "{{ rootKey.content | b64decode }}"
  when: '"kv-v2" not in secrets.stdout'